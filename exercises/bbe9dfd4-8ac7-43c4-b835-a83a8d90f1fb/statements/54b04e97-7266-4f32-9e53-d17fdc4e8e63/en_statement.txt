<p>As we have pointed out previously, when doing an <code>INSERT</code> in which the values ​​of all the columns are not specified, the value <code>NULL</code> will be obtained in those columns that are not specified. have indicated. Therefore, it is mandatory to assign a value, at least, to those columns that cannot be <code>NULL</code>.</p><h3>Example:</h3><p>In the following statement, no the value of one of the attributes that cannot be <code><em>NULL</em></code> has been specified:</p><blockquote><pre><code>INSERT INTO employees(EMPLOYEE_ID, LAST_NAME , EMAIL, HIRE_DATE)<br />VALUES (220, 'myLastName', 'email@juezlti.eu', CURRENT_DATE);</code><br /><strong><code>-- ERROR: null value in column "job_id" of relation "employees" violates not-null constraint</code></strong></pre></blockquote><p>We should find out which attributes cannot be <code>NULL</code> . To do this, we can use the <code>\d</code> statement.</p><blockquote><p><code>\d employees</code></p></blockquote><p>The above command <code>psql</code> shows us the attributes of the table, from which we extract those for which the value <code>NULL</code> is not allowed.</p><blockquote><pre> Table "public.employees"<br /> Column | Type | Collation | Nullable | Default<br />----------------+---------------------------- -+-----------+----------+------------------------- -----------------------<br /> employee_id | integer | | not null | nextval('employees_employee_id_seq'::regclass)<br /> first_name | character varying(20) | | | <br /> last_name | character varying(25) | | not null | <br /> e-mail | character varying(25) | | not null | <br /> phone_number | character varying(20) | | | <br /> hire_date | timestamp without time zone | | not null | <br /> job_id | character varying(10) | | not null | <br /> salaries | numeric(8,2) | | | <br /> commission_pct | number(2,2) | | | <br /> manager_id | integer | | | <br /> department_id | integer | | | </pre></blockquote><p>We can check that we need to add the value of the <code>JOB_ID</code> attribute.</p><blockquote><pre><code>BEGIN;<br />< br /><strong>INSERT INTO employees(EMPLOYEE_ID, LAST_NAME, EMAIL, HIRE_DATE, JOB_ID)<br />VALUES (220, 'Surname', 'email@juezlti.eu', CURRENT_DATE, 'IT_PROG');</strong ><br />-- INSERT 0 1<br /><br />SELECT * FROM employees WHERE EMPLOYEE_ID = 220;<br />ROLLBACK;</code></pre></blockquote><h3>Exercise: </h3><p>The following statement is missing some mandatory attribute</p><blockquote><pre><code>INSERT INTO job_history(EMPLOYEE_ID, START_DATE, END_DATE, DEPARTMENT_ID)<br />VALUES (120, CURRENT_DATE - 730, CURRENT_DATE, 20);</code></pre></blockquote><p>Adds the missing attribute so that the statement is executed correctly. The value of the attribute can be anything that meets the integrity constraint set on that attribute.</p><small><p><strong>Note:</strong> Don't forget to use transactions with <code>BEGIN;<code > and <code>ROLLBACK;<code> in your <code>PostgreSQL</code></p></small> environment