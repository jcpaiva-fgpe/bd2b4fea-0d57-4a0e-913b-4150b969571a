<p>El lenguaje <code>SQL</code> dispone de una serie de sentencias para la edici&oacute;n (inserci&oacute;n, actualizaci&oacute;n y borrado) de los datos almacenados en una base de datos. Ese conjunto de sentencias recibe el nombre de <code><em>Data Manipulation Language</em> (DML)</code>.</p><p>La sentencia <a href=”https://www.postgresql.org/docs/14/sql-insert.html” target=”_blank”><code>INSERT</code></a> permite la inserci&oacute;n de nuevas filas o registros en un tabla existente.</p><h3>Sintaxis</h3><p>El formato m&aacute;s sencillo de utilizaci&oacute;n de la sentencia <code>INSERT</code> tiene la siguiente sintaxis:</p><blockquote><pre><code>INSERT INTO <em>table_name</em> [ ( <em>column_name</em> [, ...] ) ]<br />    VALUES ( <em>expression</em> [, ...] );</code></pre></blockquote><p>Donde <em>table_name</em> ser&aacute; el nombre de la tabla en la que quieras a&ntilde;adir nuevos registros. En <code>( <em>column_name</em> [, ...] )</code> se indicar&aacute;n las columnas de dicha tabla en los que se desea escribir los nuevos valores indicados en <code>VALUES ( <em>expression</em> [, ...] )</code>. Es posible omitir la lista de columnas <code>( <em>column_name</em> [, ...] )</code>, si se proveen los valores de todas las columnas y en el orden en el que se encuentran en la tabla.</p><p>Tanto la lista de columnas como la de valores separar&aacute;n por comas cada uno de sus elementos. Hay que tener en cuenta tambi&eacute;n que cada campo de <code>( <em>column_name</em> [, ...] )</code> debe tener un valor v&aacute;lido en la posici&oacute;n correspondiente en <code>VALUES ( <em>expression</em> [, ...] )</code> (Si no recuerdas los valores v&aacute;lidos para cada campo puedes utilizar la sentencia <code><em>\d</em></code> seguida del nombre de la tabla que deseas consultar).</p><h3>Ejemplo</h3><p>Vamos a comenzar insertando <code>Spain</code> entre la lista de pa&iacute;ses.</p><blockquote><p><code>BEGIN;<br /><br /><strong>INSERT INTO countries (COUNTRY_ID, COUNTRY_NAME, REGION_ID)<br />VALUES (&#39;ES&#39;, &#39;Spain&#39;, 1);</strong><br />-- INSERT 0 1<br /><br />SELECT * FROM countries;<br />ROLLBACK;</code></p></blockquote><h3>Ejercicio</h3><p>Crea el departamento <code>&#39;Web Development&#39;</code> con los siguientes datos:</p><table align="center" border="1" summary="Results from query 1"><tbody><tr><th style="background-color:#9e9e9e">DEPARTMENT_ID</th><th style="background-color:#9e9e9e">DEPARTMENT_NAME</th><th style="background-color:#9e9e9e">MANAGER_ID</th><th style="background-color:#9e9e9e">LOCATION_ID</th></tr><tr><td>280</td><td>Web Development</td><td>103</td><td>1700</td></tr></tbody></table><small><p><strong>Nota:</strong> En <code>JuezLTI</code> <strong>cada vez que se lanza una respuesta se reinician los datos.</strong> Por eso, es importante que en tu entorno de trabajo <code>PostgreSQL</code> tengas siempre los datos iniciales del esquema <code>HR</code>.</p><p>Para ello, como ves en el ejemplo, deberías iniciar cada actividad con <code>BEGIN;</code>, lo cual inicia una transacción. Posteriormente, puedes ejecutar cuantas sentencias necesites, en nuestro ejemplo hemos lanzado un <code>INSERT</code> y un <code>SELECT</code>.</p><p>Una vez finalizada una actividad volveremos a dejar el esquema <code>HR</code> con sus valores iniciales con la sentencia <code>ROLLBACK;</code></p><p>No obstante, la única sentencia que habr&iacute;a que trasladar a <code>JuezLTI</code> sería la que está en resaltada. En nuestro caso, habr&iacute;a que trasladar el <code>INSERT</code> a <code>JuezLTI</code>.</p></small>